Script started on 2020-02-13 21:55:57-0500
]0;wangyul8@b3175-02:/h/u3/c7/05/wangyul8/csc209/lab6b3175-02:~/csc209/lab6$ gdb overflow
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list 36
warning: Source file is more recent than executable.
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) break 30
Breakpoint 1 at 0x8e9: file overflow.c, line 30.
(gdb) break 36
Breakpoint 2 at 0x959: file overflow.c, line 36.
(gdb) run
Starting program: /h/u3/c7/05/wangyul8/csc209/lab6/overflow 
Address of the variables:
7fffffffe6c0 -> &after[0]
7fffffffe6c4 -> &after[1]
7fffffffe6c8 -> &after[2]
7fffffffe6cc -> &after[3]
7fffffffe6b0 -> &a[0]
7fffffffe6b4 -> &a[1]
7fffffffe6b8 -> &a[2]
7fffffffe6bc -> &a[3]
7fffffffe6a0 -> &before[0]
7fffffffe6a4 -> &before[1]
7fffffffe6a8 -> &before[2]
7fffffffe6ac -> &before[3]
7fffffffe69c -> &i
7fffffffe698 -> &index

Initial values:
i = 0

Breakpoint 1, main () at overflow.c:30
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) continue
Continuing.
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) display sfta[K[K[K[K[K after
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) print[Kt [K &(after[0])
$1 = (int *) 0x7fffffffe6c0
(gdb) print &(a[][K4])
$2 = (int *) 0x7fffffffe6c0
(gdb) quit
A debugging session is active.

	Inferior 1 [process 60055] will be killed.

Quit anyway? (y or n) y
]0;wangyul8@b3175-02:/h/u3/c7/05/wangyul8/csc209/lab6b3175-02:~/csc209/lab6$ exit
exit

Script done on 2020-02-13 21:58:04-0500
